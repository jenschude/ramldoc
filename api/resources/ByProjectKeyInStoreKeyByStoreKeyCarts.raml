#ByProjectKeyInStoreKeyByStoreKeyCarts
(resourcePathUri): /{projectKey}/in-store/key={storeKey}/carts

uriParameters:
  projectKey:
    type: string
    (builtinType): string
  storeKey:
    type: string
    (builtinType): string
get:
  securedBy:
  - oauth_2_0:
      scopes:
      - "manage_project:{projectKey}"
      - "view_orders:{projectKey}"
      - "view_orders:{projectKey}:{storeKey}"
  description: |-
    Queries carts in a specific Store. The {storeKey} path parameter maps to a Store’s key.
  queryParameters:
    customerId:
      required: false
      type: string
      (builtinType): string
    expand:
      required: false
      type: string
      (builtinType): string
    where:
      required: false
      type: string
      (builtinType): string
      description: |-
        If queries support ad-hoc filtering of resources through flexible predicates, they do so via the where query
                 parameter that accepts a single (possibly compound) predicate to determine whether a specific resource
                 representation should be included in the result.
                 
                 The structure of predicates and the names of the fields follow the structure and naming of the fields in the
                 documented response representation of the query results.
                 
                 Examples of predicates:
                 
                     // Compare a field's value to a given value
                     name = "Peter"
                     age < 42
                     age > 42
                     age <= 42
                     age >= 42
                     age <> 42
                 
                     // Combine any two conditional expressions in a logical conjunction / disjunction
                     name = "Peter" and age < 42
                     name = "Peter" or age < 42
                 
                     // Negate any other conditional expression
                     not (name = "Peter" and age < 42)
                 
                     // Check whether a field's value is or is not contained in
                     // a specified set of values.
                     age in (42, 43, 44)
                     age not in (42, 43, 44)
                 
                     // Check whether an array contains all or any of a set of values
                     tags contains all ("a", "b", "c")
                     tags contains any ("a", "b", "c")
                 
                     // Check whether an array is empty
                     tags is empty
                 
                     // Check whether a field exists & has a non-null value
                     name is defined
                     name is not defined
                 
                     // Descend into nested objects
                     dog(age < 7 and name = "Beethoven")
                 
                     // Descend into nested arrays of objects
                     cities(zip > 10000 and zip < 20000)
                 
                 A query endpoint usually restricts predicates to only be allowed on a specified subset of a resource
                 representation's fields. The documentation of the endpoint will therefore list fields that can be used
                 for constructing predicates.
                 
                 If multiple predicates are specified via multiple where query parameters, the individual predicates are
                 combined in a logical conjunction, just as if they had been specified in a single where query parameter
                 and combined with and.
                 
                 Note: The encoding of the predicates is UTF-8 and the predicate must be URL-encoded in the HTTP request.
    sort:
      required: false
      type: string
      (builtinType): string
      description: |-
        A query endpoint that supports sorting does so through the sort query parameter. The provided value must be
                 a valid sort expression. The default sort direction is ASC. The allowed sort paths are typically listed on
                 the specific query endpoints.
                 
                 Here are some examples of sort expressions:
                 
                     name desc
                     dog.age asc
                 
                 If multiple sort expressions are specified via multiple sort parameters, they are combined into a composed
                 sort where the results are first sorted by the first expression, followed by equal values being sorted
                 according to the second expression, and so on.
                 
                 Note: The sorting is case sensitive.
    limit:
      required: false
      format: int16
      type: number
      (builtinType): number
      description: |-
        Number of results returned
    offset:
      required: false
      format: int16
      type: number
      (builtinType): number
      description: |-
        Number of results skipped
    withTotal:
      required: false
      type: boolean
      (builtinType): boolean
      description: |-
        Calculate total number of results
  responses:
    200:
      body:
        application/json:
          type: CartPagedQueryResponse | object
          (oneOf):
          - CartPagedQueryResponse
          - object
          (builtinType): any
post:
  securedBy:
  - oauth_2_0:
      scopes:
      - "manage_project:{projectKey}"
      - "manage_orders:{projectKey}"
      - "manage_orders:{projectKey}:{storeKey}"
  description: |-
    Creates a cart in the store specified by {storeKey}. The {storeKey} path parameter maps to a Store’s key.
    When using this endpoint the cart’s store field is always set to the store specified in the path parameter.
    Creating a cart can fail with an InvalidOperation if the referenced shipping method
    in the CartDraft has a predicate which does not match the cart.
  queryParameters:
    expand:
      required: false
      type: string
      (builtinType): string
  body:
    application/json:
      type: CartDraft
      (builtinType): object
  responses:
    201:
      body:
        application/json:
          type: Cart
          (builtinType): object
    200:
      body: