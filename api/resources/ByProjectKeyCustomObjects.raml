#ByProjectKeyCustomObjects
(resourcePathUri): /{projectKey}/custom-objects

uriParameters:
  projectKey:
    type: string
    (builtinType): string
get:
  securedBy:
  - oauth_2_0:
      scopes:
      - "manage_project:{projectKey}"
      - "view_products:{projectKey}"
      - "view_orders:{projectKey}"
      - "view_customers:{projectKey}"
  description: |-
    The query endpoint allows to retrieve custom objects in a specific container or all custom objects.
    For performance reasons, it is highly advisable to query only for custom objects in a container by using
    the container field in the where predicate.
  queryParameters:
    expand:
      required: false
      type: string
      (builtinType): string
    where:
      required: false
      type: string
      (builtinType): string
      description: |-
        If queries support ad-hoc filtering of resources through flexible predicates, they do so via the where query
        parameter that accepts a single (possibly compound) predicate to determine whether a specific resource
        representation should be included in the result.
        
        The structure of predicates and the names of the fields follow the structure and naming of the fields in the
        documented response representation of the query results.
        
        Examples of predicates:
        
            // Compare a field's value to a given value
            name = "Peter"
            age < 42
            age > 42
            age <= 42
            age >= 42
            age <> 42
        
            // Combine any two conditional expressions in a logical conjunction / disjunction
            name = "Peter" and age < 42
            name = "Peter" or age < 42
        
            // Negate any other conditional expression
            not (name = "Peter" and age < 42)
        
            // Check whether a field's value is or is not contained in
            // a specified set of values.
            age in (42, 43, 44)
            age not in (42, 43, 44)
        
            // Check whether an array contains all or any of a set of values
            tags contains all ("a", "b", "c")
            tags contains any ("a", "b", "c")
        
            // Check whether an array is empty
            tags is empty
        
            // Check whether a field exists & has a non-null value
            name is defined
            name is not defined
        
            // Descend into nested objects
            dog(age < 7 and name = "Beethoven")
        
            // Descend into nested arrays of objects
            cities(zip > 10000 and zip < 20000)
        
        A query endpoint usually restricts predicates to only be allowed on a specified subset of a resource
        representation's fields. The documentation of the endpoint will therefore list fields that can be used
        for constructing predicates.
        
        If multiple predicates are specified via multiple where query parameters, the individual predicates are
        combined in a logical conjunction, just as if they had been specified in a single where query parameter
        and combined with and.
        
        Note: The encoding of the predicates is UTF-8 and the predicate must be URL-encoded in the HTTP request.
    sort:
      required: false
      type: string
      (builtinType): string
      description: |-
        A query endpoint that supports sorting does so through the sort query parameter. The provided value must be
        a valid sort expression. The default sort direction is ASC. The allowed sort paths are typically listed on
        the specific query endpoints.
        
        Here are some examples of sort expressions:
        
            name desc
            dog.age asc
        
        If multiple sort expressions are specified via multiple sort parameters, they are combined into a composed
        sort where the results are first sorted by the first expression, followed by equal values being sorted
        according to the second expression, and so on.
        
        Note: The sorting is case sensitive.
    limit:
      required: false
      format: int16
      type: number
      (builtinType): number
      description: |-
        Number of results returned
    offset:
      required: false
      format: int16
      type: number
      (builtinType): number
      description: |-
        Number of results skipped
    withTotal:
      required: false
      type: boolean
      (builtinType): boolean
      description: |-
        Calculate total number of results
  responses:
    200:
      body:
        application/json:
          type: CustomObjectPagedQueryResponse
          (builtinType): object
post:
  securedBy:
  - oauth_2_0:
      scopes:
      - "manage_project:{projectKey}"
      - "manage_products:{projectKey}"
      - "manage_orders:{projectKey}"
      - "manage_customers:{projectKey}"
  description: |-
    Creates a new custom object or updates an existing custom object.
    If an object with the given container/key exists,
    the object will be replaced with the new value and the version is incremented.
    If the request contains a version and an object with the given container/key exists then the version
    must match the version of the existing object. Concurrent updates for the same custom object still can result
    in a Conflict (409) even if the version is not provided.
    Fields with null values will not be saved.
  queryParameters:
    expand:
      required: false
      type: string
      (builtinType): string
  body:
    application/json:
      type: CustomObjectDraft
      (builtinType): object
  responses:
    201:
      body:
        application/json:
          type: CustomObject
          (builtinType): object
    200:
      body: